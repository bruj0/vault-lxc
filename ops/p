#!/bin/bash -e
####
# OPERATIONS
###

# To enable debug: export DEBUG=true
# Enable debug if the env variable DEBUG is set to true
if [[ "$DEBUG" == "true" ]];then
    set -x
fi
case "$0" in
"ops/p")
    export VAULT_CLUSTER="primary"
    export VAULT_ADDR=https://127.0.0.1:9301
    export VAULT_BASE_ADDR=https://127.0.0.1:930
    export VAULT_UNSEALER_ADDR=https://127.0.0.1:9300
    export VAULT_PKI_ADDR=http://127.0.0.1:9304
;;
"ops/s")
    export VAULT_CLUSTER="secondary"
    export VAULT_ADDR=https://127.0.0.1:9501
    export VAULT_BASE_ADDR=https://127.0.0.1:950
    export VAULT_UNSEALER_ADDR=https://127.0.0.1:9500
    export VAULT_PKI_ADDR=http://127.0.0.1:9504
;;
"ops/dr")
    export VAULT_CLUSTER="dr"
    export VAULT_ADDR=https://127.0.0.1:9701
    export VAULT_BASE_ADDR=https://127.0.0.1:970
    export VAULT_UNSEALER_ADDR=https://127.0.0.1:9700
    export VAULT_PKI_ADDR=http://127.0.0.1:9704
;;
esac

YAPI_BASE="ops/api"
YAPI_PATH="${YAPI_BASE}/vault"
bold=$(tput bold)
normal=$(tput sgr0)
#Internal variables
export VAULT_DATA="ops/data/${VAULT_CLUSTER}"
export VAULT_TOKEN=$(cat $VAULT_DATA/init.json | jq -r '.root_token')
export VAULT_PREFIX=""
case "$1" in
"help")
        echo "${bold}Usage: $0 <vault node> <vault command>| <operation command>${normal}"

        echo "PKI:"
        echo "  ${bold}init_pki${normal}"
        echo "  ${bold}unseal_pki${normal}"
        echo "  ${bold}config_pki${normal}"
        echo "  ${bold}copy_certs${normal}"
        echo "  ${bold}copy_ca${normal}: Copy ${VAULT_CLUSTER} CA certs to the DR and Secondary"

        echo "Unsealer:"
        echo "  ${bold}init_unsealer${normal}"
        echo "  ${bold}unseal_unsealer${normal}"
        echo "  ${bold}config_unsealer${normal}"

        echo "Vault:"
        echo "  ${bold}init${normal}"
        echo "  ${bold}join_raft${normal}"

        echo "Replication":
        echo "    ${bold}enable_perf${normal}: on primary"
        echo "    ${bold}activate_perf${normal}: on secondary" 
        echo "    ${bold}revoke_perf${normal}"

        echo "DR":
        echo "    ${bold}enable_dr${normal}"
        echo "    ${bold}activate_dr${normal}(only on secondary)" 
        echo "    ${bold}revoke_dr${normal}"

        echo "General:"
        echo "  ${bold}wipe${normal}"
        echo "  ${bold}vars${normal}: show Vault env vars"
        echo "  ${bold}vars_unsealer${normal}: show Vault env vars for the unsealer"
        echo "  ${bold}vars_pki${normal}: show Vault env vars for the pki"
        echo "  ${bold}yapi${normal}: runs yapi with correct variables"
        echo "  ${bold}generate_root_recovery${normal}"

    ;;
## PKI
"init_pki")
        # Initializaing and Unsealing
        if [ ! -f "$VAULT_DATA/pki_init.json" ]; then
            export VAULT_PREFIX="pki_"
            export VAULT_ADDR=${VAULT_PKI_ADDR}
            echo "Initializing Vault PKI for ${VAULT_CLUSTER} at ${VAULT_ADDR}, files stored in ${VAULT_DATA}"
            yapi ${YAPI_PATH}/01-init.yaml 
        fi
## fall trough to unseal_pki
;&
"unseal_pki")
        export VAULT_PREFIX="pki_"
        export VAULT_ADDR=${VAULT_PKI_ADDR}
        echo "Unsealing Vault PKI"
        yapi ${YAPI_PATH}/02-unseal.yaml

## fall trough to config_pki
;&
"config_pki")
        set +e
        export VAULT_ADDR=${VAULT_PKI_ADDR}
        export VAULT_TOKEN=$(cat $VAULT_DATA/pki_init.json | jq -r '.root_token')        
        echo "Enabling PKI secret engine"
        yapi ${YAPI_BASE}/pki/01-enable-pki.yaml || true
        sleep 3
        yapi ${YAPI_BASE}/pki/02-vault-certificates.yaml
## fall through to copy_certs 
;& 
"copy_certs")
    infra_data="infra/data/${VAULT_CLUSTER}/ssl"
    ops_data="ops/data/${VAULT_CLUSTER}/ssl"
    CA=$(cat ${ops_data}/signed_intermediate_ca.json |jq -r ".data.issuing_ca")
    INTCA=$(cat ${ops_data}/signed_intermediate_ca.json |jq -r ".data.certificate")
#CA 
    cat > ${infra_data}/ca.pem << EOL
${CA}
EOL
    cat > ${infra_data}/ca_int.pem << EOL
${INTCA}
EOL
# Individual certs

    for i in "vault01" "vault02" "vault03" "unsealer"; do
        echo "Building cert for $i"
        CRT=$(cat ${ops_data}/${VAULT_CLUSTER}-${i}.json |jq -r ".data.certificate")
        KEY=$(cat ${ops_data}/${VAULT_CLUSTER}-${i}.json |jq -r ".data.private_key")
        cat >${infra_data}/${VAULT_CLUSTER}-${i}.pem << EOL
${CRT}
EOL
        cat > ${infra_data}/${VAULT_CLUSTER}-${i}.key << EOL
${KEY}
EOL
        #Individual certs
        scp ${infra_data}/${VAULT_CLUSTER}-${i}.pem  root@${VAULT_CLUSTER}-${i}:/etc/vault.d/
        scp ${infra_data}/${VAULT_CLUSTER}-${i}.key   root@${VAULT_CLUSTER}-${i}:/etc/vault.d/
        #CA certs
        scp ${infra_data}/ca.pem   root@${VAULT_CLUSTER}-${i}:/etc/vault.d/
        scp ${infra_data}/ca_int.pem   root@${VAULT_CLUSTER}-${i}:/etc/vault.d/
        #Trust store rebuild
        scp ${infra_data}/ca.pem   root@${VAULT_CLUSTER}-${i}:/usr/local/share/ca-certificates/${VAULT_CLUSTER}-ca.crt
        scp ${infra_data}/ca_int.pem   root@${VAULT_CLUSTER}-${i}:/usr/local/share/ca-certificates/${VAULT_CLUSTER}-ca_int.crt
        lxc exec ${VAULT_CLUSTER}-$i --  update-ca-certificates --fresh
    done
;;
"copy_ca")
    infra_data="infra/data/${VAULT_CLUSTER}/ssl"
    for i in "dr" "secondary"; do
        echo "Copying CA cert to $i"
        for v in "vault01" "vault02" "vault03"; do
            scp ${infra_data}/ca.pem   root@${i}-${v}:/etc/vault.d/${VAULT_CLUSTER}-ca.pem
            scp ${infra_data}/ca.pem   root@${i}-${v}:/usr/local/share/ca-certificates/${VAULT_CLUSTER}-ca.crt
            scp ${infra_data}/ca_int.pem   root@${i}-${v}:/usr/local/share/ca-certificates/${VAULT_CLUSTER}-ca_int.crt
            scp ${infra_data}/ca_int.pem   root@${i}-${v}:/etc/vault.d/${VAULT_CLUSTER}-ca_int.pem
            lxc exec ${i}-$v --  update-ca-certificates --fresh
        done
    done
;;
## Unsealer operations
"init_unsealer")
        # Initializaing and Unsealing
        if [ ! -f "$VAULT_DATA/unsealer_init.json" ]; then
            export VAULT_PREFIX="unsealer_"
            export VAULT_ADDR=${VAULT_UNSEALER_ADDR}
            echo "Initializing Vault cluster ${CLUSTER} at ${VAULT_ADDR}, files stored in ${VAULT_DATA}"
            yapi ${YAPI_PATH}/01-init.yaml 
        fi
;&
"unseal_unsealer")
        export VAULT_PREFIX="unsealer_"
        export VAULT_ADDR=${VAULT_UNSEALER_ADDR}
        echo "Unsealing Vault Unsealer"
        yapi ${YAPI_PATH}/02-unseal.yaml
;&
"config_unsealer")
        set +e
        export VAULT_ADDR=${VAULT_UNSEALER_ADDR}
        export VAULT_TOKEN=$(cat $VAULT_DATA/unsealer_init.json | jq -r '.root_token')        
        echo "Enabling transit secret"
        yapi ${YAPI_PATH}/08-enable_transit.yaml
        yapi ${YAPI_PATH}/09-setup_transit.yaml
;;
## Auto-unsealer operations
"init")
        # Initializaing and Unsealing
        if [ ! -f "$VAULT_DATA/init.json" ]; then
            echo "Initializing Vault cluster ${CLUSTER} at ${VAULT_ADDR}, files stored in ${VAULT_DATA}"
            yapi ${YAPI_PATH}/10-init_recovery.yaml 
        fi    
;;
## Performance Replication
"enable_perf")
        set +e
        echo "Enabling replication in ${VAULT_CLUSTER}"
        yapi ${YAPI_PATH}/03-replication_enable_primary.yaml 

        echo "Creating secondary JWT token id=perf-secondary"
        yapi ${YAPI_PATH}/04-replication_secondary_token.yaml 
;;
"activate_perf")
        if [ "$0" == "ops/p" ]; then
            echo "Must be activated in secondary"
            exit 0
        fi
        echo "Enabling secondary replication to primary"
        export VAULT_DATA_PRIMARY="ops/data/primary"
        yapi ${YAPI_PATH}/05-replication_activate_secondary.yaml 

        echo "Enabling secondary replication to primary"
        yapi ${YAPI_PATH}/05-replication_activate_secondary.yaml                 
;;

"revoke_perf")
    vault write -f sys/replication/performance/primary/revoke-secondary id=perf-secondary
    rm ops/data/primary/perf-secondary-token.json
    rm ops/data/secondary/enable-perf-secondary-resp.json
;;
## DR Replication
"enable_dr")
        if [ "$0" != "ops/p" ]; then
            echo "Must be enabled in primary"
            exit 0
        fi
        set +e
        echo "Enabling replication in ${VAULT_CLUSTER}"
        yapi ${YAPI_PATH}/07-dr_primary_enable.yaml

        echo "Creating secondary DR JWT token id=dr-secondary"
        yapi ${YAPI_PATH}/12-dr_secondary_token.yaml
;;
"activate_dr")
        if [ "$0" != "ops/dr" ]; then
            echo "Must be activated in dr"
            exit 0
        fi
        echo "Enabling secondary replication to primary"
        export VAULT_DATA_PRIMARY="ops/data/primary"
        yapi ${YAPI_PATH}/13-dr_secondary_enable.yaml
;;
"revoke_dr")
    vault write -f sys/replication/dr/primary/revoke-secondary id=dr-secondary
;;
## General
"switch_consul")
    set +e
    for i in "vault01" "vault02" "vault03" ; do
        echo "Switching to consul storage for $i"
        lxc exec ${VAULT_CLUSTER}-${i} -- mv /etc/vault.d/vault-raft.hcl /etc/vault.d/vault-raft.dis; /etc/vault.d/vault-consul.dis /etc/vault.d/vault-consul.hcl; 
    done
;;
"switch_raft")
    set +e
    for i in "vault01" "vault02" "vault03" ; do
        echo "Switching to consul storage for $i"
        lxc exec ${VAULT_CLUSTER}-${i} -- mv /etc/vault.d/vault-raft.dis /etc/vault.d/vault-raft.hcl 
        lxc exec ${VAULT_CLUSTER}-${i} -- mv /etc/vault.d/vault-consul.hcl /etc/vault.d/vault-consul.dis
    done
;;
"join_raft")
    set +e
    VAULT_ADDR="${VAULT_BASE_ADDR}2" vault operator raft join https://${VAULT_CLUSTER}-vault01.lxd:8200
    VAULT_ADDR="${VAULT_BASE_ADDR}3" vault operator raft join https://${VAULT_CLUSTER}-vault01.lxd:8200
;;
"ssh_keyscan")
    for c in "dr" "secondary" "primary"; do
        for h in "vault01" "vault02" "vault03" "unsealer" "pki" "consul01" "consul02" "consul03"; do
            ssh-keyscan ${c}-${h}
        done
    done
;;
"wipe")
    echo "WIPE data ON: ${VAULT_CLUSTER}?"
    read
    rm $VAULT_DATA/init.json
    rm $VAULT_DATA/perf-secondary-token.json
    rm $VAULT_DATA/enable-perf-secondary-resp.json
;;
"vars")
        echo "Exporting variables for ${VAULT_CLUSTER} Vault"
        echo "export VAULT_ADDR=\"${VAULT_ADDR}\""
        echo "export VAULT_TOKEN=\"${VAULT_TOKEN}\""
;;
"vars_unsealer")
        export VAULT_TOKEN=$(cat $VAULT_DATA/unsealer_init.json | jq -r '.root_token')
        echo "Exporting variables for Unsealer Vault"
        echo "export VAULT_ADDR=\"${VAULT_UNSEALER_ADDR}\""
        echo "export VAULT_TOKEN=\"${VAULT_TOKEN}\""
;;
"vars_pki")
        export VAULT_TOKEN=$(cat $VAULT_DATA/pki_init.json | jq -r '.root_token')
        echo "Exporting variables for PKI Vault"
        echo "export VAULT_ADDR=\"${VAULT_PKI_ADDR}\""
        echo "export VAULT_TOKEN=\"${VAULT_TOKEN}\""
;;
"yapi")
        yapi ${@}
;;
"generate_root_recovery")
        echo "Creating a root token for secondary with the new unseal keys"
        export VAULT_DATA_PRIMARY="ops/data/primary"        
        yapi ${YAPI_PATH}/11-replication_generate_root_recovery.yaml
;;
#Default
    *)
        # if [ "${VAULT_CLUSTER}" == "secondary" ]; then
        #     if [ -f "ops/data/secondary/enable-perf-secondary-resp.json" ]; then
        #         export VAULT_TOKEN=$(cat ops/data/primary/init.json | jq -r '.root_token')
        #     fi
        # fi
        set +x
        export VAULT_ADDR=${VAULT_BASE_ADDR}$1
        case "$2" in
            "raft_config")
                    vault read -format=json sys/storage/raft/configuration | jq
                    exit 1
            ;;
        esac
        #echo "VAULT_ADDR=${VAULT_ADDR}"
        vault ${@:2}
;;    
esac
